// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ERC721MinterBurnerPauser

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ERC721MinterBurnerPauserABI is the input ABI used to generate the binding from.
const ERC721MinterBurnerPauserABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ERC721MinterBurnerPauserBin is the compiled bytecode used for deploying new contracts.
var ERC721MinterBurnerPauserBin = "0x60806040523480156200001157600080fd5b50604051620043e5380380620043e5833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115620001d257600080fd5b83820191506020820185811115620001e957600080fd5b82518660018202830111640100000000821117156200020757600080fd5b8083526020830192505050908051906020019080838360005b838110156200023d57808201518184015260208101905062000220565b50505050905090810190601f1680156200026b5780820380516001836020036101000a031916815260200191505b5060405250505082826200028c6301ffc9a760e01b620003e360201b60201c565b8160079080519060200190620002a49291906200069e565b508060089080519060200190620002bd9291906200069e565b50620002d66380ac58cd60e01b620003e360201b60201c565b620002ee635b5e139f60e01b620003e360201b60201c565b6200030663780e9d6360e01b620003e360201b60201c565b50506000600b60006101000a81548160ff021916908315150217905550620003476000801b6200033b620004ec60201b60201c565b620004f460201b60201c565b620003887f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66200037c620004ec60201b60201c565b620004f460201b60201c565b620003c97f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a620003bd620004ec60201b60201c565b620004f460201b60201c565b620003da816200050a60201b60201c565b50505062000744565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600033905090565b6200050682826200052660201b60201c565b5050565b80600a9080519060200190620005229291906200069e565b5050565b6200055481600080858152602001908152602001600020600001620005c960201b62001dfa1790919060201c565b15620005c5576200056a620004ec60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620005f9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200060160201b60201c565b905092915050565b60006200061583836200067b60201b60201c565b6200067057826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000675565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006e157805160ff191683800117855562000712565b8280016001018555821562000712579182015b8281111562000711578251825591602001919060010190620006f4565b5b50905062000721919062000725565b5090565b5b808211156200074057600081600090555060010162000726565b5090565b613c9180620007546000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80636c0360eb1161010f578063b88d4fde116100a2578063d539139311610071578063d539139314610c1c578063d547741f14610c3a578063e63ab1e914610c88578063e985e9c514610ca6576101f0565b8063b88d4fde14610949578063c87b56dd14610a4e578063ca15c87314610af5578063d3fc986414610b37576101f0565b806391d14854116100de57806391d14854146107f457806395d89b4114610858578063a217fddf146108db578063a22cb465146108f9576101f0565b80636c0360eb146106ad57806370a08231146107305780638456cb59146107885780639010d07c14610792576101f0565b80632f745c591161018757806342966c681161015657806342966c68146105c55780634f6ccce7146105f35780635c975abb146106355780636352211e14610655576101f0565b80632f745c591461049d57806336568abe146104ff5780633f4ba83a1461054d57806342842e0e14610557576101f0565b806318160ddd116101c357806318160ddd1461038157806323b872dd1461039f578063248a9ca31461040d5780632f2ff15d1461044f576101f0565b806301ffc9a7146101f557806306fdde0314610258578063081812fc146102db578063095ea7b314610333575b600080fd5b6102406004803603602081101561020b57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610d20565b60405180821515815260200191505060405180910390f35b610260610d88565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a0578082015181840152602081019050610285565b50505050905090810190601f1680156102cd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610307600480360360208110156102f157600080fd5b8101908080359060200190929190505050610e2a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61037f6004803603604081101561034957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ec5565b005b610389611009565b6040518082815260200191505060405180910390f35b61040b600480360360608110156103b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061101a565b005b6104396004803603602081101561042357600080fd5b8101908080359060200190929190505050611090565b6040518082815260200191505060405180910390f35b61049b6004803603604081101561046557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110af565b005b6104e9600480360360408110156104b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611138565b6040518082815260200191505060405180910390f35b61054b6004803603604081101561051557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611193565b005b61055561122c565b005b6105c36004803603606081101561056d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112bc565b005b6105f1600480360360208110156105db57600080fd5b81019080803590602001909291905050506112dc565b005b61061f6004803603602081101561060957600080fd5b810190808035906020019092919050505061134e565b6040518082815260200191505060405180910390f35b61063d611371565b60405180821515815260200191505060405180910390f35b6106816004803603602081101561066b57600080fd5b8101908080359060200190929190505050611388565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106b56113bf565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106f55780820151818401526020810190506106da565b50505050905090810190601f1680156107225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107726004803603602081101561074657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611461565b6040518082815260200191505060405180910390f35b610790611536565b005b6107c8600480360360408110156107a857600080fd5b8101908080359060200190929190803590602001909291905050506115c6565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108406004803603604081101561080a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115f7565b60405180821515815260200191505060405180910390f35b610860611628565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108a0578082015181840152602081019050610885565b50505050905090810190601f1680156108cd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108e36116ca565b6040518082815260200191505060405180910390f35b6109476004803603604081101561090f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506116d1565b005b610a4c6004803603608081101561095f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156109c657600080fd5b8201836020820111156109d857600080fd5b803590602001918460018302840111640100000000831117156109fa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611887565b005b610a7a60048036036020811015610a6457600080fd5b81019080803590602001909291905050506118ff565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610aba578082015181840152602081019050610a9f565b50505050905090810190601f168015610ae75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610b2160048036036020811015610b0b57600080fd5b8101908080359060200190929190505050611bd0565b6040518082815260200191505060405180910390f35b610c1a60048036036060811015610b4d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610b9457600080fd5b820183602082011115610ba657600080fd5b80359060200191846001830284011164010000000083111715610bc857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611bf6565b005b610c24611c95565b6040518082815260200191505060405180910390f35b610c8660048036036040811015610c5057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cb9565b005b610c90611d42565b6040518082815260200191505060405180910390f35b610d0860048036036040811015610cbc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d66565b60405180821515815260200191505060405180910390f35b600060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e205780601f10610df557610100808354040283529160200191610e20565b820191906000526020600020905b815481529060010190602001808311610e0357829003601f168201915b5050505050905090565b6000610e3582611e2a565b610e8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613ac4602c913960400191505060405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610ed082611388565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613b746021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610f76611e47565b73ffffffffffffffffffffffffffffffffffffffff161480610fa55750610fa481610f9f611e47565b611d66565b5b610ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180613a176038913960400191505060405180910390fd5b6110048383611e4f565b505050565b60006110156003611f08565b905090565b61102b611025611e47565b82611f1d565b611080576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613b956031913960400191505060405180910390fd5b61108b838383612011565b505050565b6000806000838152602001908152602001600020600201549050919050565b6110d5600080848152602001908152602001600020600201546110d0611e47565b6115f7565b61112a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018061389e602f913960400191505060405180910390fd5b6111348282612254565b5050565b600061118b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206122e790919063ffffffff16565b905092915050565b61119b611e47565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461121e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613bf6602f913960400191505060405180910390fd5b6112288282612301565b5050565b61125d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611258611e47565b6115f7565b6112b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001806139ad603a913960400191505060405180910390fd5b6112ba612394565b565b6112d783838360405180602001604052806000815250611887565b505050565b6112ed6112e7611e47565b82611f1d565b611342576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180613bc66030913960400191505060405180910390fd5b61134b8161247f565b50565b6000806113658360036125b990919063ffffffff16565b50905080915050919050565b6000600b60009054906101000a900460ff16905090565b60006113b882604051806060016040528060298152602001613a796029913960036125e59092919063ffffffff16565b9050919050565b6060600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114575780601f1061142c57610100808354040283529160200191611457565b820191906000526020600020905b81548152906001019060200180831161143a57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613a4f602a913960400191505060405180910390fd5b61152f600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612604565b9050919050565b6115677f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611562611e47565b6115f7565b6115bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806139756038913960400191505060405180910390fd5b6115c4612619565b565b60006115ef8260008086815260200190815260200160002060000161270590919063ffffffff16565b905092915050565b60006116208260008086815260200190815260200160002060000161271f90919063ffffffff16565b905092915050565b606060088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116c05780601f10611695576101008083540402835291602001916116c0565b820191906000526020600020905b8154815290600101906020018083116116a357829003601f168201915b5050505050905090565b6000801b81565b6116d9611e47565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561177a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b8060066000611787611e47565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611834611e47565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b611898611892611e47565b83611f1d565b6118ed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613b956031913960400191505060405180910390fd5b6118f98484848461274f565b50505050565b606061190a82611e2a565b61195f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613b45602f913960400191505060405180910390fd5b6060600960008481526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a085780601f106119dd57610100808354040283529160200191611a08565b820191906000526020600020905b8154815290600101906020018083116119eb57829003601f168201915b505050505090506060611a196113bf565b9050600081511415611a2f578192505050611bcb565b600082511115611b005780826040516020018083805190602001908083835b60208310611a715780518252602082019150602081019050602083039250611a4e565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310611ac25780518252602082019150602081019050602083039250611a9f565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050611bcb565b80611b0a856127c1565b6040516020018083805190602001908083835b60208310611b405780518252602082019150602081019050602083039250611b1d565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310611b915780518252602082019150602081019050602083039250611b6e565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052925050505b919050565b6000611bef600080848152602001908152602001600020600001612908565b9050919050565b611c277f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6611c22611e47565b6115f7565b611c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526037815260200180613c256037913960400191505060405180910390fd5b611c86838361291d565b611c908282612b11565b505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b611cdf60008084815260200190815260200160002060020154611cda611e47565b6115f7565b611d34576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806139e76030913960400191505060405180910390fd5b611d3e8282612301565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000611e22836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b9b565b905092915050565b6000611e40826003612c0b90919063ffffffff16565b9050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611ec283611388565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611f1682600001612c25565b9050919050565b6000611f2882611e2a565b611f7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613949602c913960400191505060405180910390fd5b6000611f8883611388565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ff757508373ffffffffffffffffffffffffffffffffffffffff16611fdf84610e2a565b73ffffffffffffffffffffffffffffffffffffffff16145b8061200857506120078185611d66565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661203182611388565b73ffffffffffffffffffffffffffffffffffffffff161461209d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180613b1c6029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612123576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806138ff6024913960400191505060405180910390fd5b61212e838383612c36565b612139600082611e4f565b61218a81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612c4690919063ffffffff16565b506121dc81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612c6090919063ffffffff16565b506121f381836003612c7a9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b61227b81600080858152602001908152602001600020600001611dfa90919063ffffffff16565b156122e357612288611e47565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006122f68360000183612caf565b60001c905092915050565b61232881600080858152602001908152602001600020600001612d3290919063ffffffff16565b1561239057612335611e47565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b61239c611371565b61240e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000600b60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612452611e47565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600061248a82611388565b905061249881600084612c36565b6124a3600083611e4f565b600060096000848152602001908152602001600020805460018160011615610100020316600290049050146124f2576009600083815260200190815260200160002060006124f1919061376b565b5b61254382600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612c4690919063ffffffff16565b50612558826003612d6290919063ffffffff16565b5081600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000806000806125cc8660000186612d7c565b915091508160001c8160001c9350935050509250929050565b60006125f8846000018460001b84612e15565b60001c90509392505050565b600061261282600001612f0b565b9050919050565b612621611371565b15612694576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600b60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126d8611e47565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006127148360000183612caf565b60001c905092915050565b6000612747836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612f1c565b905092915050565b61275a848484612011565b61276684848484612f3f565b6127bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806138cd6032913960400191505060405180910390fd5b50505050565b60606000821415612809576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612903565b600082905060005b60008214612833578080600101915050600a828161282b57fe5b049150612811565b60608167ffffffffffffffff8111801561284c57600080fd5b506040519080825280601f01601f19166020018201604052801561287f5781602001600182028036833780820191505090505b50905060006001830390508593505b600084146128fb57600a84816128a057fe5b0660300160f81b828280600190039350815181106128ba57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a84816128f357fe5b04935061288e565b819450505050505b919050565b600061291682600001612f0b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b6129c981611e2a565b15612a3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b612a4860008383612c36565b612a9981600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612c6090919063ffffffff16565b50612ab081836003612c7a9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b612b1a82611e2a565b612b6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613af0602c913960400191505060405180910390fd5b80600960008481526020019081526020016000209080519060200190612b969291906137b3565b505050565b6000612ba78383612f1c565b612c00578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612c05565b600090505b92915050565b6000612c1d836000018360001b613158565b905092915050565b600081600001805490509050919050565b612c4183838361317b565b505050565b6000612c58836000018360001b6131e9565b905092915050565b6000612c72836000018360001b612b9b565b905092915050565b6000612ca6846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b6132d1565b90509392505050565b600081836000018054905011612d10576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806138516022913960400191505060405180910390fd5b826000018281548110612d1f57fe5b9060005260206000200154905092915050565b6000612d5a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6131e9565b905092915050565b6000612d74836000018360001b6133ad565b905092915050565b60008082846000018054905011612dde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613aa26022913960400191505060405180910390fd5b6000846000018481548110612def57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390612edc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612ea1578082015181840152602081019050612e86565b50505050905090810190601f168015612ece5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50846000016001820381548110612eef57fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6000612f608473ffffffffffffffffffffffffffffffffffffffff166134c6565b612f6d5760019050613150565b60606130d763150b7a0260e01b612f82611e47565b888787604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613006578082015181840152602081019050612feb565b50505050905090810190601f1680156130335780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518060600160405280603281526020016138cd603291398773ffffffffffffffffffffffffffffffffffffffff166134d99092919063ffffffff16565b905060008180602001905160208110156130f057600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614925050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b6131868383836134f1565b61318e611371565b156131e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613873602b913960400191505060405180910390fd5b505050565b600080836001016000848152602001908152602001600020549050600081146132c5576000600182039050600060018660000180549050039050600086600001828154811061323457fe5b906000526020600020015490508087600001848154811061325157fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061328957fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506132cb565b60009150505b92915050565b6000808460010160008581526020019081526020016000205490506000811415613378578460000160405180604001604052808681526020018581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505084600001805490508560010160008681526020019081526020016000208190555060019150506133a6565b8285600001600183038154811061338b57fe5b90600052602060002090600202016001018190555060009150505b9392505050565b600080836001016000848152602001908152602001600020549050600081146134ba57600060018203905060006001866000018054905003905060008660000182815481106133f857fe5b906000526020600020906002020190508087600001848154811061341857fe5b906000526020600020906002020160008201548160000155600182015481600101559050506001830187600101600083600001548152602001908152602001600020819055508660000180548061346b57fe5b60019003818190600052602060002090600202016000808201600090556001820160009055505090558660010160008781526020019081526020016000206000905560019450505050506134c0565b60009150505b92915050565b600080823b905060008111915050919050565b60606134e884846000856134f6565b90509392505050565b505050565b606082471015613551576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806139236026913960400191505060405180910390fd5b61355a856134c6565b6135cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061361c57805182526020820191506020810190506020830392506135f9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461367e576040519150601f19603f3d011682016040523d82523d6000602084013e613683565b606091505b509150915061369382828661369f565b92505050949350505050565b606083156136af57829050613764565b6000835111156136c25782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561372957808201518184015260208101905061370e565b50505050905090810190601f1680156137565780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b50805460018160011615610100020316600290046000825580601f1061379157506137b0565b601f0160209004906000526020600020908101906137af9190613833565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106137f457805160ff1916838001178555613822565b82800160010185558215613822579182015b82811115613821578251825591602001919060010190613806565b5b50905061382f9190613833565b5090565b5b8082111561384c576000816000905550600101613834565b509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732315061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d696e7465724275726e65725061757365723a206d75737420686176652070617573657220726f6c6520746f2070617573654552433732314d696e7465724275726e65725061757365723a206d75737420686176652070617573657220726f6c6520746f20756e7061757365416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b654552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c664552433732314d696e7465724275726e65725061757365723a206d7573742068617665206d696e74657220726f6c6520746f206d696e74a26469706673582212208835524a9a9f2f9bdc1aa33bb66e19f61645bb8b521fc85ad93e870700a3bf6364736f6c63430007000033"

// DeployERC721MinterBurnerPauser deploys a new Ethereum contract, binding an instance of ERC721MinterBurnerPauser to it.
func DeployERC721MinterBurnerPauser(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, baseURI string) (common.Address, *types.Transaction, *ERC721MinterBurnerPauser, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC721MinterBurnerPauserABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC721MinterBurnerPauserBin), backend, name, symbol, baseURI)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC721MinterBurnerPauser{ERC721MinterBurnerPauserCaller: ERC721MinterBurnerPauserCaller{contract: contract}, ERC721MinterBurnerPauserTransactor: ERC721MinterBurnerPauserTransactor{contract: contract}, ERC721MinterBurnerPauserFilterer: ERC721MinterBurnerPauserFilterer{contract: contract}}, nil
}

// ERC721MinterBurnerPauser is an auto generated Go binding around an Ethereum contract.
type ERC721MinterBurnerPauser struct {
	ERC721MinterBurnerPauserCaller     // Read-only binding to the contract
	ERC721MinterBurnerPauserTransactor // Write-only binding to the contract
	ERC721MinterBurnerPauserFilterer   // Log filterer for contract events
}

// ERC721MinterBurnerPauserCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721MinterBurnerPauserCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721MinterBurnerPauserTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721MinterBurnerPauserTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721MinterBurnerPauserFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721MinterBurnerPauserFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721MinterBurnerPauserSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC721MinterBurnerPauserSession struct {
	Contract     *ERC721MinterBurnerPauser // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ERC721MinterBurnerPauserCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC721MinterBurnerPauserCallerSession struct {
	Contract *ERC721MinterBurnerPauserCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// ERC721MinterBurnerPauserTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC721MinterBurnerPauserTransactorSession struct {
	Contract     *ERC721MinterBurnerPauserTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// ERC721MinterBurnerPauserRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC721MinterBurnerPauserRaw struct {
	Contract *ERC721MinterBurnerPauser // Generic contract binding to access the raw methods on
}

// ERC721MinterBurnerPauserCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC721MinterBurnerPauserCallerRaw struct {
	Contract *ERC721MinterBurnerPauserCaller // Generic read-only contract binding to access the raw methods on
}

// ERC721MinterBurnerPauserTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC721MinterBurnerPauserTransactorRaw struct {
	Contract *ERC721MinterBurnerPauserTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC721MinterBurnerPauser creates a new instance of ERC721MinterBurnerPauser, bound to a specific deployed contract.
func NewERC721MinterBurnerPauser(address common.Address, backend bind.ContractBackend) (*ERC721MinterBurnerPauser, error) {
	contract, err := bindERC721MinterBurnerPauser(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauser{ERC721MinterBurnerPauserCaller: ERC721MinterBurnerPauserCaller{contract: contract}, ERC721MinterBurnerPauserTransactor: ERC721MinterBurnerPauserTransactor{contract: contract}, ERC721MinterBurnerPauserFilterer: ERC721MinterBurnerPauserFilterer{contract: contract}}, nil
}

// NewERC721MinterBurnerPauserCaller creates a new read-only instance of ERC721MinterBurnerPauser, bound to a specific deployed contract.
func NewERC721MinterBurnerPauserCaller(address common.Address, caller bind.ContractCaller) (*ERC721MinterBurnerPauserCaller, error) {
	contract, err := bindERC721MinterBurnerPauser(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserCaller{contract: contract}, nil
}

// NewERC721MinterBurnerPauserTransactor creates a new write-only instance of ERC721MinterBurnerPauser, bound to a specific deployed contract.
func NewERC721MinterBurnerPauserTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC721MinterBurnerPauserTransactor, error) {
	contract, err := bindERC721MinterBurnerPauser(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserTransactor{contract: contract}, nil
}

// NewERC721MinterBurnerPauserFilterer creates a new log filterer instance of ERC721MinterBurnerPauser, bound to a specific deployed contract.
func NewERC721MinterBurnerPauserFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC721MinterBurnerPauserFilterer, error) {
	contract, err := bindERC721MinterBurnerPauser(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserFilterer{contract: contract}, nil
}

// bindERC721MinterBurnerPauser binds a generic wrapper to an already deployed contract.
func bindERC721MinterBurnerPauser(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC721MinterBurnerPauserABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721MinterBurnerPauser.Contract.ERC721MinterBurnerPauserCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.ERC721MinterBurnerPauserTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.ERC721MinterBurnerPauserTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721MinterBurnerPauser.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ERC721MinterBurnerPauser.Contract.DEFAULTADMINROLE(&_ERC721MinterBurnerPauser.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ERC721MinterBurnerPauser.Contract.DEFAULTADMINROLE(&_ERC721MinterBurnerPauser.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) MINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) MINTERROLE() ([32]byte, error) {
	return _ERC721MinterBurnerPauser.Contract.MINTERROLE(&_ERC721MinterBurnerPauser.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) MINTERROLE() ([32]byte, error) {
	return _ERC721MinterBurnerPauser.Contract.MINTERROLE(&_ERC721MinterBurnerPauser.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) PAUSERROLE() ([32]byte, error) {
	return _ERC721MinterBurnerPauser.Contract.PAUSERROLE(&_ERC721MinterBurnerPauser.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) PAUSERROLE() ([32]byte, error) {
	return _ERC721MinterBurnerPauser.Contract.PAUSERROLE(&_ERC721MinterBurnerPauser.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721MinterBurnerPauser.Contract.BalanceOf(&_ERC721MinterBurnerPauser.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721MinterBurnerPauser.Contract.BalanceOf(&_ERC721MinterBurnerPauser.CallOpts, owner)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) BaseURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "baseURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) BaseURI() (string, error) {
	return _ERC721MinterBurnerPauser.Contract.BaseURI(&_ERC721MinterBurnerPauser.CallOpts)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) BaseURI() (string, error) {
	return _ERC721MinterBurnerPauser.Contract.BaseURI(&_ERC721MinterBurnerPauser.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721MinterBurnerPauser.Contract.GetApproved(&_ERC721MinterBurnerPauser.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721MinterBurnerPauser.Contract.GetApproved(&_ERC721MinterBurnerPauser.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ERC721MinterBurnerPauser.Contract.GetRoleAdmin(&_ERC721MinterBurnerPauser.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ERC721MinterBurnerPauser.Contract.GetRoleAdmin(&_ERC721MinterBurnerPauser.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _ERC721MinterBurnerPauser.Contract.GetRoleMember(&_ERC721MinterBurnerPauser.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _ERC721MinterBurnerPauser.Contract.GetRoleMember(&_ERC721MinterBurnerPauser.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _ERC721MinterBurnerPauser.Contract.GetRoleMemberCount(&_ERC721MinterBurnerPauser.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _ERC721MinterBurnerPauser.Contract.GetRoleMemberCount(&_ERC721MinterBurnerPauser.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ERC721MinterBurnerPauser.Contract.HasRole(&_ERC721MinterBurnerPauser.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ERC721MinterBurnerPauser.Contract.HasRole(&_ERC721MinterBurnerPauser.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721MinterBurnerPauser.Contract.IsApprovedForAll(&_ERC721MinterBurnerPauser.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721MinterBurnerPauser.Contract.IsApprovedForAll(&_ERC721MinterBurnerPauser.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) Name() (string, error) {
	return _ERC721MinterBurnerPauser.Contract.Name(&_ERC721MinterBurnerPauser.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) Name() (string, error) {
	return _ERC721MinterBurnerPauser.Contract.Name(&_ERC721MinterBurnerPauser.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721MinterBurnerPauser.Contract.OwnerOf(&_ERC721MinterBurnerPauser.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721MinterBurnerPauser.Contract.OwnerOf(&_ERC721MinterBurnerPauser.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) Paused() (bool, error) {
	return _ERC721MinterBurnerPauser.Contract.Paused(&_ERC721MinterBurnerPauser.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) Paused() (bool, error) {
	return _ERC721MinterBurnerPauser.Contract.Paused(&_ERC721MinterBurnerPauser.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721MinterBurnerPauser.Contract.SupportsInterface(&_ERC721MinterBurnerPauser.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721MinterBurnerPauser.Contract.SupportsInterface(&_ERC721MinterBurnerPauser.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) Symbol() (string, error) {
	return _ERC721MinterBurnerPauser.Contract.Symbol(&_ERC721MinterBurnerPauser.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) Symbol() (string, error) {
	return _ERC721MinterBurnerPauser.Contract.Symbol(&_ERC721MinterBurnerPauser.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _ERC721MinterBurnerPauser.Contract.TokenByIndex(&_ERC721MinterBurnerPauser.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _ERC721MinterBurnerPauser.Contract.TokenByIndex(&_ERC721MinterBurnerPauser.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _ERC721MinterBurnerPauser.Contract.TokenOfOwnerByIndex(&_ERC721MinterBurnerPauser.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _ERC721MinterBurnerPauser.Contract.TokenOfOwnerByIndex(&_ERC721MinterBurnerPauser.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721MinterBurnerPauser.Contract.TokenURI(&_ERC721MinterBurnerPauser.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721MinterBurnerPauser.Contract.TokenURI(&_ERC721MinterBurnerPauser.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC721MinterBurnerPauser.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) TotalSupply() (*big.Int, error) {
	return _ERC721MinterBurnerPauser.Contract.TotalSupply(&_ERC721MinterBurnerPauser.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC721MinterBurnerPauser.Contract.TotalSupply(&_ERC721MinterBurnerPauser.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.Approve(&_ERC721MinterBurnerPauser.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.Approve(&_ERC721MinterBurnerPauser.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.Burn(&_ERC721MinterBurnerPauser.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.Burn(&_ERC721MinterBurnerPauser.TransactOpts, tokenId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.GrantRole(&_ERC721MinterBurnerPauser.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.GrantRole(&_ERC721MinterBurnerPauser.TransactOpts, role, account)
}

// Mint is a paid mutator transaction binding the contract method 0xd3fc9864.
//
// Solidity: function mint(address to, uint256 tokenId, string _data) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) Mint(opts *bind.TransactOpts, to common.Address, tokenId *big.Int, _data string) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "mint", to, tokenId, _data)
}

// Mint is a paid mutator transaction binding the contract method 0xd3fc9864.
//
// Solidity: function mint(address to, uint256 tokenId, string _data) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) Mint(to common.Address, tokenId *big.Int, _data string) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.Mint(&_ERC721MinterBurnerPauser.TransactOpts, to, tokenId, _data)
}

// Mint is a paid mutator transaction binding the contract method 0xd3fc9864.
//
// Solidity: function mint(address to, uint256 tokenId, string _data) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) Mint(to common.Address, tokenId *big.Int, _data string) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.Mint(&_ERC721MinterBurnerPauser.TransactOpts, to, tokenId, _data)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) Pause() (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.Pause(&_ERC721MinterBurnerPauser.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) Pause() (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.Pause(&_ERC721MinterBurnerPauser.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.RenounceRole(&_ERC721MinterBurnerPauser.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.RenounceRole(&_ERC721MinterBurnerPauser.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.RevokeRole(&_ERC721MinterBurnerPauser.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.RevokeRole(&_ERC721MinterBurnerPauser.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.SafeTransferFrom(&_ERC721MinterBurnerPauser.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.SafeTransferFrom(&_ERC721MinterBurnerPauser.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.SafeTransferFrom0(&_ERC721MinterBurnerPauser.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.SafeTransferFrom0(&_ERC721MinterBurnerPauser.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.SetApprovalForAll(&_ERC721MinterBurnerPauser.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.SetApprovalForAll(&_ERC721MinterBurnerPauser.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.TransferFrom(&_ERC721MinterBurnerPauser.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.TransferFrom(&_ERC721MinterBurnerPauser.TransactOpts, from, to, tokenId)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserSession) Unpause() (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.Unpause(&_ERC721MinterBurnerPauser.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserTransactorSession) Unpause() (*types.Transaction, error) {
	return _ERC721MinterBurnerPauser.Contract.Unpause(&_ERC721MinterBurnerPauser.TransactOpts)
}

// ERC721MinterBurnerPauserApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserApprovalIterator struct {
	Event *ERC721MinterBurnerPauserApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721MinterBurnerPauserApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721MinterBurnerPauserApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721MinterBurnerPauserApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721MinterBurnerPauserApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721MinterBurnerPauserApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721MinterBurnerPauserApproval represents a Approval event raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ERC721MinterBurnerPauserApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserApprovalIterator{contract: _ERC721MinterBurnerPauser.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC721MinterBurnerPauserApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721MinterBurnerPauserApproval)
				if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) ParseApproval(log types.Log) (*ERC721MinterBurnerPauserApproval, error) {
	event := new(ERC721MinterBurnerPauserApproval)
	if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721MinterBurnerPauserApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserApprovalForAllIterator struct {
	Event *ERC721MinterBurnerPauserApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721MinterBurnerPauserApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721MinterBurnerPauserApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721MinterBurnerPauserApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721MinterBurnerPauserApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721MinterBurnerPauserApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721MinterBurnerPauserApprovalForAll represents a ApprovalForAll event raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ERC721MinterBurnerPauserApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserApprovalForAllIterator{contract: _ERC721MinterBurnerPauser.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ERC721MinterBurnerPauserApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721MinterBurnerPauserApprovalForAll)
				if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) ParseApprovalForAll(log types.Log) (*ERC721MinterBurnerPauserApprovalForAll, error) {
	event := new(ERC721MinterBurnerPauserApprovalForAll)
	if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721MinterBurnerPauserPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserPausedIterator struct {
	Event *ERC721MinterBurnerPauserPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721MinterBurnerPauserPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721MinterBurnerPauserPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721MinterBurnerPauserPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721MinterBurnerPauserPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721MinterBurnerPauserPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721MinterBurnerPauserPaused represents a Paused event raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) FilterPaused(opts *bind.FilterOpts) (*ERC721MinterBurnerPauserPausedIterator, error) {

	logs, sub, err := _ERC721MinterBurnerPauser.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserPausedIterator{contract: _ERC721MinterBurnerPauser.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ERC721MinterBurnerPauserPaused) (event.Subscription, error) {

	logs, sub, err := _ERC721MinterBurnerPauser.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721MinterBurnerPauserPaused)
				if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) ParsePaused(log types.Log) (*ERC721MinterBurnerPauserPaused, error) {
	event := new(ERC721MinterBurnerPauserPaused)
	if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721MinterBurnerPauserRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserRoleAdminChangedIterator struct {
	Event *ERC721MinterBurnerPauserRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721MinterBurnerPauserRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721MinterBurnerPauserRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721MinterBurnerPauserRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721MinterBurnerPauserRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721MinterBurnerPauserRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721MinterBurnerPauserRoleAdminChanged represents a RoleAdminChanged event raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ERC721MinterBurnerPauserRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserRoleAdminChangedIterator{contract: _ERC721MinterBurnerPauser.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ERC721MinterBurnerPauserRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721MinterBurnerPauserRoleAdminChanged)
				if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) ParseRoleAdminChanged(log types.Log) (*ERC721MinterBurnerPauserRoleAdminChanged, error) {
	event := new(ERC721MinterBurnerPauserRoleAdminChanged)
	if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721MinterBurnerPauserRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserRoleGrantedIterator struct {
	Event *ERC721MinterBurnerPauserRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721MinterBurnerPauserRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721MinterBurnerPauserRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721MinterBurnerPauserRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721MinterBurnerPauserRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721MinterBurnerPauserRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721MinterBurnerPauserRoleGranted represents a RoleGranted event raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ERC721MinterBurnerPauserRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserRoleGrantedIterator{contract: _ERC721MinterBurnerPauser.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ERC721MinterBurnerPauserRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721MinterBurnerPauserRoleGranted)
				if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) ParseRoleGranted(log types.Log) (*ERC721MinterBurnerPauserRoleGranted, error) {
	event := new(ERC721MinterBurnerPauserRoleGranted)
	if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721MinterBurnerPauserRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserRoleRevokedIterator struct {
	Event *ERC721MinterBurnerPauserRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721MinterBurnerPauserRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721MinterBurnerPauserRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721MinterBurnerPauserRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721MinterBurnerPauserRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721MinterBurnerPauserRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721MinterBurnerPauserRoleRevoked represents a RoleRevoked event raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ERC721MinterBurnerPauserRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserRoleRevokedIterator{contract: _ERC721MinterBurnerPauser.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ERC721MinterBurnerPauserRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721MinterBurnerPauserRoleRevoked)
				if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) ParseRoleRevoked(log types.Log) (*ERC721MinterBurnerPauserRoleRevoked, error) {
	event := new(ERC721MinterBurnerPauserRoleRevoked)
	if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721MinterBurnerPauserTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserTransferIterator struct {
	Event *ERC721MinterBurnerPauserTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721MinterBurnerPauserTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721MinterBurnerPauserTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721MinterBurnerPauserTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721MinterBurnerPauserTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721MinterBurnerPauserTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721MinterBurnerPauserTransfer represents a Transfer event raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ERC721MinterBurnerPauserTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserTransferIterator{contract: _ERC721MinterBurnerPauser.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC721MinterBurnerPauserTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721MinterBurnerPauser.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721MinterBurnerPauserTransfer)
				if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) ParseTransfer(log types.Log) (*ERC721MinterBurnerPauserTransfer, error) {
	event := new(ERC721MinterBurnerPauserTransfer)
	if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721MinterBurnerPauserUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserUnpausedIterator struct {
	Event *ERC721MinterBurnerPauserUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721MinterBurnerPauserUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721MinterBurnerPauserUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721MinterBurnerPauserUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721MinterBurnerPauserUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721MinterBurnerPauserUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721MinterBurnerPauserUnpaused represents a Unpaused event raised by the ERC721MinterBurnerPauser contract.
type ERC721MinterBurnerPauserUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ERC721MinterBurnerPauserUnpausedIterator, error) {

	logs, sub, err := _ERC721MinterBurnerPauser.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ERC721MinterBurnerPauserUnpausedIterator{contract: _ERC721MinterBurnerPauser.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ERC721MinterBurnerPauserUnpaused) (event.Subscription, error) {

	logs, sub, err := _ERC721MinterBurnerPauser.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721MinterBurnerPauserUnpaused)
				if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC721MinterBurnerPauser *ERC721MinterBurnerPauserFilterer) ParseUnpaused(log types.Log) (*ERC721MinterBurnerPauserUnpaused, error) {
	event := new(ERC721MinterBurnerPauserUnpaused)
	if err := _ERC721MinterBurnerPauser.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
